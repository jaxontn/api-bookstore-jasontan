
--------------------------------------
added 'prettier/prettier' : 0
to .eslintrc.js under "rules" field
--------------------------------------


--------------------------------------
added "builder": "swc"
to nest-cli.json
--------------------------------------

npm i -D @swc/cli @swc/core

npm run start:dev

-------------------------------------
//Setup NestJS Prisma & postgresql
nest add nestjs-prisma --add-prisma-service
chose: postgresql
yes, Dockerize my application

//Go to .env file (rename this later)
POSTGRES_DB = bookstoredb
//Updated DATABASE_URL and replaced @nest-postgres:5432 with @localhost:5432


//Remove these from docker-compose.yml
  nest-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nest-api
    restart: always
    ports:
      - '3000:3000'
    depends_on:
      - nest-postgres
    env_file:
      - .env

//DIDNT updated nest-postgres to nest-postgres-posts, remained as nest-postgres
################################################

//1. make sure docker desktop is running first. 
//2. (optional) before you run docker-compose, delete data from 
     "Containers", "Images", "Volumes", "Builds"
//3. To make sure database running:
docker-compose up
-------------------------------------

//IF ERROR ENCOUNTERED WITH "docker-compose up", run these command on *windows* termianl.
netstat -aon | findstr :5432
//Stop-Process -Id <ID NAME>
example:
Stop-Process -Id 17224
Stop-Process -Id 2380


------------------------------------------------
Now, update schema in prisma/schema.prisma
add the model
------------------------------------------------

------------------------------------------------
//Now, manage the schema.prisma and its models
npx prisma migrate dev 

//Enter a name for the new migration:
"create tables"

//It created a migration.sql where it looks like normal MySQL
//inspect it to confirm the correctness of it.
------------------------------------------------


-------------------------------------
//Creating the resources for tables
nest generate resource user
nest generate resource books
nest generate resource book-details
nest generate resource orders
nest generate resource order-items

chose: REST API
yes, for create entry points
-------------------------------------


-------------------------------------
//Update src/user/dto/create-user.dto.ts

//NOT Updating src/modules/posts/posts.controller.ts because id using serial by default, no need change to string
//Updated src/modules/posts/posts.service.ts
  1. Added constructor "constructor(private readonly prisma: PrismaService) {}"
  2. Update all the returns to return this.prima...
//Updated src/modules/posts/posts.module.ts to include: 
  "imports: [PrismaModule],"
--------------------------------------------------------







----------------
BACKUP POSTGRESQL TO BACKUP.SQL
//docker exec -t nest-postgres pg_dump -U ${POSTGRES_USER} ${POSTGRES_DB} > backup.sql
docker exec -t nest-postgres-posts pg_dump -U prisma postdb > backup.sql
----------------

----------------
RESTORE POSTGRESQL FROM BACKUP.SQL
//docker exec -i nest-postgres psql -U ${POSTGRES_USER} ${POSTGRES_DB} < backup.sql
docker exec -i nest-postgres-posts psql -U prisma postdb < backup.sql
//commented CREATE TABLE